{
  "name": "{{ job_name }}",
  "description": "The ***run_customermgmt*** paramater accepts either ***YES*** or ***NO***.  If this XML file has already been ingested, the *dw_init* task does **NOT** remove it (since it is kind of a pain). Therefore, if you want to disable this task and just keep the existing historical customermgmt staging table then change to ***NO***.  It is set to ***YES*** by default.",
  "email_notifications": {
    "no_alert_for_skipped_runs": false
  },
  "webhook_notifications": {},
  "timeout_seconds": 0,
  "max_concurrent_runs": 1,
  "parameters": [
    {
      "name": "catalog",
      "default": "{{ catalog }}"
    },
    {
      "name": "run_customermgmt",
      "default": "YES"
    },
    {
      "name": "scale_factor",
      "default": "{{ scale_factor }}"
    },
    {
      "name": "tpcdi_directory",
      "default": "{{ tpcdi_directory }}"
    },
    {
      "name": "wh_db",
      "default": "{{ wh_target }}_{{ exec_type }}"
    },
    {
      "name": "predictive_optimization",
      "default": "{{ pred_opt }}"
    }
  ],
  {% if scale_factor > 100 and serverless != "YES" %}
  "job_clusters": [
    {
      "job_cluster_key": "{{ job_name }}_compute",
      "new_cluster": {
        "cluster_name": "",
        "spark_version": "{{ dbr }}",
        "spark_conf": {
          "spark.master": "local[*, 4]",
          "spark.databricks.cluster.profile": "singleNode",
          "spark.sql.shuffle.partitions": "auto",
          "spark.databricks.adaptive.localShuffleReader.enabled": "true"
        },
        "driver_node_type_id": "{{ driver_node_type }}",
        "node_type_id": "{{ worker_node_type }}",
        "custom_tags": {
          "ResourceClass": "SingleNode"
        },
        "spark_env_vars": {
          "PYSPARK_PYTHON": "/databricks/python3/bin/python3"
        },
        "enable_elastic_disk": true,
        "data_security_mode": "SINGLE_USER",
        "runtime_engine": "STANDARD",
        "num_workers": 0
      }
    }
  ],
  {% elif serverless != "YES" %}
  "job_clusters": [
    {
      "job_cluster_key": "{{ job_name }}_compute",
      "new_cluster": {
        "spark_version": "{{ dbr }}",
        "spark_conf": {
          {% if worker_node_count == 0 %}
          "spark.master": "local[*, 4]",
          "spark.databricks.cluster.profile": "singleNode",
          "spark.databricks.adaptive.localShuffleReader.enabled": "true",
          {% endif %}
          "spark.sql.shuffle.partitions": "auto"
        },
        {% if cloud_provider == "Azure" %} 
        "azure_attributes": {
          "availability": "SPOT_WITH_FALLBACK_AZURE",
          "first_on_demand": 1,
          "spot_bid_price_percent": -1
        },
        {% endif %}
        {% if cloud_provider == "AWS" %}
        "aws_attributes": {
          "availability": "SPOT_WITH_FALLBACK",
          "first_on_demand": 1,
          "zone_id": "auto",
          "spot_bid_price_percent": 100
        },
        {% endif %}
        "spark_env_vars": {
          "PYSPARK_PYTHON": "/databricks/python3/bin/python3"
        },
        {% if worker_node_count == 0 %}
        "custom_tags": {
          "ResourceClass": "SingleNode"
        },
        {% endif %}
        "driver_node_type_id": "{{ driver_node_type }}",
        "node_type_id": "{{ worker_node_type }}",
        "num_workers": {{ worker_node_count }},
        "enable_elastic_disk": true,
        "data_security_mode": "SINGLE_USER",
        "runtime_engine": "PHOTON"
      }
    }
  ],
  {% endif %}
  "tasks": [
    {
      "task_key": "dw_init",
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/dw_init",
        "base_parameters": {
          {% raw %}"pred_opt": "{{job.parameters.predictive_optimization}}"{% endraw %}
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "run_customermgmt_YES_NO",
      "depends_on": [
        {
          "task_key": "dw_init"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "condition_task": {
        "op": "EQUAL_TO",
        {% raw %}"left": "{{job.parameters.run_customermgmt}}"{% endraw %},
        "right": "YES"
      },
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_customermgmt",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "true"
        }
      ],
      "run_if": "ALL_SUCCESS",
      {% if scale_factor > 100 %}
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/incremental_batches/bronze/CustomerMgmtRaw_mavenlib",
        "base_parameters": {
          {% if serverless != "YES" %}
          "xml_lib": "com.databricks.spark.xml"
          {% else %}
          "xml_lib": "xml"
          {% endif %}
        },
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "libraries": [
        {
          "maven": {
            "coordinates": "com.databricks:spark-xml_2.12:0.18.0"
          }
        }
      ],
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      {% else %}
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/CustomerMgmtRaw",
        "base_parameters": {
          "xml_lib": "xml"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_DimDate",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "false"
        },
        {
          "task_key": "ingest_customermgmt"
        }
      ],
      "run_if": "AT_LEAST_ONE_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/raw_ingestion",
        "base_parameters": {
          "raw_schema": "sk_dateid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for the date', datevalue DATE COMMENT 'The date stored appropriately for doing comparisons in the Data Warehouse', datedesc STRING COMMENT 'The date in full written form e.g. July 7 2004', calendaryearid INT COMMENT 'Year number as a number', calendaryeardesc STRING COMMENT 'Year number as text', calendarqtrid INT COMMENT 'Quarter as a number e.g. 20042', calendarqtrdesc STRING COMMENT 'Quarter as text e.g. 2004 Q2', calendarmonthid INT COMMENT 'Month as a number e.g. 20047', calendarmonthdesc STRING COMMENT 'Month as text e.g. 2004 July', calendarweekid INT COMMENT 'Week as a number e.g. 200428', calendarweekdesc STRING COMMENT 'Week as text e.g. 2004-W28', dayofweeknum INT COMMENT 'Day of week as a number e.g. 3', dayofweekdesc STRING COMMENT 'Day of week as text e.g. Wednesday', fiscalyearid INT COMMENT 'Fiscal year as a number e.g. 2005', fiscalyeardesc STRING COMMENT 'Fiscal year as text e.g. 2005', fiscalqtrid INT COMMENT 'Fiscal quarter as a number e.g. 20051', fiscalqtrdesc STRING COMMENT 'Fiscal quarter as text e.g. 2005 Q1', holidayflag BOOLEAN COMMENT 'Indicates holidays'",
          "filename": "Date.txt",
          "tbl": "DimDate",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT dimdate_pk PRIMARY KEY(sk_dateid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_DimTime",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "false"
        },
        {
          "task_key": "ingest_customermgmt"
        }
      ],
      "run_if": "AT_LEAST_ONE_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/raw_ingestion",
        "base_parameters": {
          "raw_schema": "sk_timeid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for the time', timevalue STRING COMMENT 'The time stored appropriately for doing', hourid INT COMMENT 'Hour number as a number e.g. 01', hourdesc STRING COMMENT 'Hour number as text e.g. 01', minuteid INT COMMENT 'Minute as a number e.g. 23', minutedesc STRING COMMENT 'Minute as text e.g. 01:23', secondid INT COMMENT 'Second as a number e.g. 45', seconddesc STRING COMMENT 'Second as text e.g. 01:23:45', markethoursflag BOOLEAN COMMENT 'Indicates a time during market hours', officehoursflag BOOLEAN COMMENT 'Indicates a time during office hours'",
          "filename": "Time.txt",
          "tbl": "DimTime",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT dimtime_pk PRIMARY KEY(sk_timeid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_StatusType",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "false"
        },
        {
          "task_key": "ingest_customermgmt"
        }
      ],
      "run_if": "AT_LEAST_ONE_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/raw_ingestion",
        "base_parameters": {
          "raw_schema": "st_id STRING COMMENT 'Status code', st_name STRING {{ null_constraint }} COMMENT 'Status description'",
          "filename": "StatusType.txt",
          "tbl": "StatusType",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT statustype_pk PRIMARY KEY(st_name){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_TaxRate",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "false"
        },
        {
          "task_key": "ingest_customermgmt"
        }
      ],
      "run_if": "AT_LEAST_ONE_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/raw_ingestion",
        "base_parameters": {
          "raw_schema": "tx_id STRING {{ null_constraint }} COMMENT 'Tax rate code', tx_name STRING COMMENT 'Tax rate description', tx_rate FLOAT COMMENT 'Tax rate'",
          "filename": "TaxRate.txt",
          "tbl": "TaxRate",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT taxrate_pk PRIMARY KEY(tx_id){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_TradeType",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "false"
        },
        {
          "task_key": "ingest_customermgmt"
        }
      ],
      "run_if": "AT_LEAST_ONE_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/raw_ingestion",
        "base_parameters": {
          "raw_schema": "tt_id STRING {{ null_constraint }} COMMENT 'Trade type code', tt_name STRING COMMENT 'Trade type description', tt_is_sell INT COMMENT 'Flag indicating a sale', tt_is_mrkt INT COMMENT 'Flag indicating a market order'",
          "filename": "TradeType.txt",
          "tbl": "TradeType",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT tradetype_pk PRIMARY KEY(tt_id){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_industry",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "false"
        },
        {
          "task_key": "ingest_customermgmt"
        }
      ],
      "run_if": "AT_LEAST_ONE_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/raw_ingestion",
        "base_parameters": {
          "raw_schema": "in_id STRING COMMENT 'Industry code', in_name STRING {{ null_constraint }} COMMENT 'Industry description', in_sc_id STRING COMMENT 'Sector identifier'",
          "filename": "Industry.txt",
          "tbl": "Industry",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT industry_pk PRIMARY KEY(in_name){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_BatchDate",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "false"
        },
        {
          "task_key": "ingest_customermgmt"
        }
      ],
      "run_if": "AT_LEAST_ONE_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/Ingest_Incremental",
        "base_parameters": {
          "filename": "BatchDate.txt",
          "raw_schema": "batchdate DATE {{ null_constraint }} COMMENT 'Batch date'",
          "tbl": "BatchDate",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT batchdate_pk PRIMARY KEY(batchdate){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_FinWire",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "false"
        },
        {
          "task_key": "ingest_customermgmt"
        }
      ],
      "run_if": "AT_LEAST_ONE_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/ingest_finwire",
         "base_parameters": {
          "tbl_props": "'delta.dataSkippingNumIndexedCols' = 0, 'delta.autoOptimize.autoCompact'=False, {{ opt_write }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "ingest_ProspectIncremental",
      "depends_on": [
        {
          "task_key": "run_customermgmt_YES_NO",
          "outcome": "false"
        },
        {
          "task_key": "ingest_customermgmt"
        }
      ],
      "run_if": "AT_LEAST_ONE_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/ingest_prospectincremental",
        "base_parameters": {
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Silver_DimBroker",
      "depends_on": [
        {
          "task_key": "ingest_DimDate"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/DimBroker",
        "base_parameters": {
          "tgt_schema": "sk_brokerid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for broker', brokerid BIGINT COMMENT 'Natural key for broker', managerid BIGINT COMMENT 'Natural key for manager’s HR record', firstname STRING COMMENT 'First name', lastname STRING COMMENT 'Last Name', middleinitial STRING COMMENT 'Middle initial', branch STRING COMMENT 'Facility in which employee has office', office STRING COMMENT 'Office number or description', phone STRING COMMENT 'Employee phone number', iscurrent BOOLEAN COMMENT 'True if this is the current record', batchid INT COMMENT 'Batch ID when this record was inserted', effectivedate DATE COMMENT 'Beginning of date range when this record was the current record', enddate DATE COMMENT 'Ending of date range when this record was the current record. A record that is not expired will use the date 9999-12-31.'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT dimbroker_pk PRIMARY KEY(sk_brokerid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Silver_DimCustomer",
      "depends_on": [
        {
          "task_key": "ingest_ProspectIncremental"
        },
        {
          "task_key": "ingest_TaxRate"
        },
        {
          "task_key": "ingest_BatchDate"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/DimCustomer",
        "base_parameters": {
          "tgt_schema": "sk_customerid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for CustomerID', customerid BIGINT COMMENT 'Customer identifier', taxid STRING COMMENT 'Customer’s tax identifier', status STRING COMMENT 'Customer status type', lastname STRING COMMENT 'Customers last name.', firstname STRING COMMENT 'Customers first name.', middleinitial STRING COMMENT 'Customers middle name initial', gender STRING COMMENT 'Gender of the customer', tier TINYINT COMMENT 'Customer tier', dob DATE COMMENT 'Customer’s date of birth.', addressline1 STRING COMMENT 'Address Line 1', addressline2 STRING COMMENT 'Address Line 2', postalcode STRING COMMENT 'Zip or Postal Code', city STRING COMMENT 'City', stateprov STRING COMMENT 'State or Province', country STRING COMMENT 'Country', phone1 STRING COMMENT 'Phone number 1', phone2 STRING COMMENT 'Phone number 2', phone3 STRING COMMENT 'Phone number 3', email1 STRING COMMENT 'Email address 1', email2 STRING COMMENT 'Email address 2', nationaltaxratedesc STRING COMMENT 'National Tax rate description', nationaltaxrate FLOAT COMMENT 'National Tax rate', localtaxratedesc STRING COMMENT 'Local Tax rate description', localtaxrate FLOAT COMMENT 'Local Tax rate', agencyid STRING COMMENT 'Agency identifier', creditrating INT COMMENT 'Credit rating', networth INT COMMENT 'Net worth', marketingnameplate STRING COMMENT 'Marketing nameplate', iscurrent BOOLEAN COMMENT 'True if this is the current record', batchid INT COMMENT 'Batch ID when this record was inserted', effectivedate DATE COMMENT 'Beginning of date range when this record was the current record', enddate DATE COMMENT 'Ending of date range when this record was the current record. A record that is not expired will use the date 9999-12-31.'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT dimcustomer_pk PRIMARY KEY(sk_customerid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Silver_DimAccount",
      "depends_on": [
        {
          "task_key": "Silver_DimBroker"
        },
        {
          "task_key": "Silver_DimCustomer"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/DimAccount",
        "base_parameters": {
          "tgt_schema": "sk_accountid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for AccountID', accountid BIGINT COMMENT 'Customer account identifier', sk_brokerid BIGINT COMMENT 'Surrogate key of managing broker', sk_customerid BIGINT COMMENT 'Surrogate key of customer', accountdesc STRING COMMENT 'Name of customer account', taxstatus TINYINT COMMENT 'Tax status of this account', status STRING COMMENT 'Account status, active or closed', iscurrent BOOLEAN COMMENT 'True if this is the current record', batchid INT COMMENT 'Batch ID when this record was inserted', effectivedate DATE COMMENT 'Beginning of date range when this record was the current record', enddate DATE COMMENT 'Ending of date range when this record was the current record. A record that is not expired will use the date 9999-12-31.'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT dimaccount_pk PRIMARY KEY(sk_accountid), CONSTRAINT dimaccount_customer_fk FOREIGN KEY (sk_customerid) REFERENCES DimCustomer(sk_customerid), CONSTRAINT dimaccount_broker_fk FOREIGN KEY (sk_brokerid) REFERENCES DimBroker(sk_brokerid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Gold_FactCashBalances",
      "depends_on": [
        {
          "task_key": "Silver_DimAccount"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/FactCashBalances",
        "base_parameters": {
          "tgt_schema": "sk_customerid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for CustomerID', sk_accountid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for AccountID', sk_dateid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for the date', cash DOUBLE COMMENT 'Cash balance for the account after applying', batchid INT COMMENT 'Batch ID when this record was inserted'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT cashbalances_pk PRIMARY KEY(sk_customerid, sk_accountid, sk_dateid), CONSTRAINT cashbalances_customer_fk FOREIGN KEY (sk_customerid) REFERENCES DimCustomer(sk_customerid), CONSTRAINT cashbalances_account_fk FOREIGN KEY (sk_accountid) REFERENCES DimAccount(sk_accountid), CONSTRAINT cashbalances_date_fk FOREIGN KEY (sk_dateid) REFERENCES DimDate(sk_dateid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Silver_Prospect",
      "depends_on": [
        {
          "task_key": "Silver_DimCustomer"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/Prospect",
        "base_parameters": {
          "tgt_schema": "agencyid STRING {{ null_constraint }} COMMENT 'Unique identifier from agency', sk_recorddateid BIGINT COMMENT 'Last date this prospect appeared in input', sk_updatedateid BIGINT COMMENT 'Latest change date for this prospect', batchid INT COMMENT 'Batch ID when this record was last modified', iscustomer BOOLEAN COMMENT 'True if this person is also in DimCustomer,else False', lastname STRING COMMENT 'Last name', firstname STRING COMMENT 'First name', middleinitial STRING COMMENT 'Middle initial', gender STRING COMMENT 'M / F / U', addressline1 STRING COMMENT 'Postal address', addressline2 STRING COMMENT 'Postal address', postalcode STRING COMMENT 'Postal code', city STRING COMMENT 'City', state STRING COMMENT 'State or province', country STRING COMMENT 'Postal country', phone STRING COMMENT 'Telephone number', income STRING COMMENT 'Annual income', numbercars INT COMMENT 'Cars owned', numberchildren INT COMMENT 'Dependent children', maritalstatus STRING COMMENT 'S / M / D / W / U', age INT COMMENT 'Current age', creditrating INT COMMENT 'Numeric rating', ownorrentflag STRING COMMENT 'O / R / U', employer STRING COMMENT 'Name of employer', numbercreditcards INT COMMENT 'Credit cards', networth INT COMMENT 'Estimated total net worth', marketingnameplate STRING COMMENT 'For marketing purposes'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT prospect_pk PRIMARY KEY(agencyid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Silver_DimCompany",
      "depends_on": [
        {
          "task_key": "ingest_FinWire"
        },
        {
          "task_key": "ingest_industry"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/DimCompany",
        "base_parameters": {
          "tgt_schema": "sk_companyid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for CompanyID', companyid BIGINT COMMENT 'Company identifier (CIK number)', status STRING COMMENT 'Company status', name STRING COMMENT 'Company name', industry STRING COMMENT 'Company’s industry', sprating STRING COMMENT 'Standard & Poor company’s rating', islowgrade BOOLEAN COMMENT 'True if this company is low grade', ceo STRING COMMENT 'CEO name', addressline1 STRING COMMENT 'Address Line 1', addressline2 STRING COMMENT 'Address Line 2', postalcode STRING COMMENT 'Zip or postal code', city STRING COMMENT 'City', stateprov STRING COMMENT 'State or Province', country STRING COMMENT 'Country', description STRING COMMENT 'Company description', foundingdate DATE COMMENT 'Date the company was founded', iscurrent BOOLEAN COMMENT 'True if this is the current record', batchid INT COMMENT 'Batch ID when this record was inserted', effectivedate DATE COMMENT 'Beginning of date range when this record was the current record', enddate DATE COMMENT 'Ending of date range when this record was the current record. A record that is not expired will use the date 9999-12-31.'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT dimcompany_pk PRIMARY KEY(sk_companyid), CONSTRAINT dimcompany_status_fk FOREIGN KEY (status) REFERENCES StatusType(st_name), CONSTRAINT dimcompany_industry_fk FOREIGN KEY (industry) REFERENCES Industry(in_name){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Silver_DimSecurity",
      "depends_on": [
        {
          "task_key": "Silver_DimCompany"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/DimSecurity",
        "base_parameters": {
          "tgt_schema": "sk_securityid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for Symbol', symbol STRING COMMENT 'Identifies security on ticker', issue STRING COMMENT 'Issue type', status STRING COMMENT 'Status type', name STRING COMMENT 'Security name', exchangeid STRING COMMENT 'Exchange the security is traded on', sk_companyid BIGINT COMMENT 'Company issuing security', sharesoutstanding BIGINT COMMENT 'Shares outstanding', firsttrade DATE COMMENT 'Date of first trade', firsttradeonexchange DATE COMMENT 'Date of first trade on this exchange', dividend DOUBLE COMMENT 'Annual dividend per share', iscurrent BOOLEAN COMMENT 'True if this is the current record', batchid INT COMMENT 'Batch ID when this record was inserted', effectivedate DATE COMMENT 'Beginning of date range when this record was the current record', enddate DATE COMMENT 'Ending of date range when this record was the current record. A record that is not expired will use the date 9999-12-31.'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT dimsecurity_pk PRIMARY KEY(sk_securityid), CONSTRAINT dimsecurity_status_fk FOREIGN KEY (status) REFERENCES StatusType(st_name), CONSTRAINT dimsecurity_company_fk FOREIGN KEY (sk_companyid) REFERENCES DimCompany(sk_companyid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Gold_FactWatches",
      "depends_on": [
        {
          "task_key": "Silver_DimSecurity"
        },
        {
          "task_key": "Silver_DimCustomer"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/FactWatches",
        "base_parameters": {
          "tgt_schema": "sk_customerid BIGINT {{ null_constraint }} COMMENT 'Customer associated with watch list', sk_securityid BIGINT {{ null_constraint }} COMMENT 'Security listed on watch list', sk_dateid_dateplaced BIGINT COMMENT 'Date the watch list item was added', sk_dateid_dateremoved BIGINT COMMENT 'Date the watch list item was removed', batchid INT COMMENT 'Batch ID when this record was inserted'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT factwatches_pk PRIMARY KEY(sk_customerid, sk_securityid), CONSTRAINT factwatches_customer_fk FOREIGN KEY (sk_customerid) REFERENCES DimCustomer(sk_customerid), CONSTRAINT factwatches_security_fk FOREIGN KEY (sk_securityid) REFERENCES DimSecurity(sk_securityid), CONSTRAINT factwatches_dateplaced_fk FOREIGN KEY (sk_dateid_dateplaced) REFERENCES DimDate(sk_dateid), CONSTRAINT factwatches_dateremoved_fk FOREIGN KEY (sk_dateid_dateremoved) REFERENCES DimDate(sk_dateid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Silver_DimTrade",
      "depends_on": [
        {
          "task_key": "Silver_DimSecurity"
        },
        {
          "task_key": "Silver_DimAccount"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/DimTrade",
        "base_parameters": {
          "tgt_schema": "tradeid INT {{ null_constraint }} COMMENT 'Trade identifier', sk_brokerid BIGINT COMMENT 'Surrogate key for BrokerID', sk_createdateid BIGINT COMMENT 'Surrogate key for date created', sk_createtimeid BIGINT COMMENT 'Surrogate key for time created', sk_closedateid BIGINT COMMENT 'Surrogate key for date closed', sk_closetimeid BIGINT COMMENT 'Surrogate key for time closed', status STRING COMMENT 'Trade status', type STRING COMMENT 'Trade type', cashflag BOOLEAN COMMENT 'Is this trade a cash or margin trade?', sk_securityid BIGINT COMMENT 'Surrogate key for SecurityID', sk_companyid BIGINT COMMENT 'Surrogate key for CompanyID', quantity INT COMMENT 'Quantity of securities traded.', bidprice DOUBLE COMMENT 'The requested unit price.', sk_customerid BIGINT COMMENT 'Surrogate key for CustomerID', sk_accountid BIGINT COMMENT 'Surrogate key for AccountID', executedby STRING COMMENT 'Name of person executing the trade.', tradeprice DOUBLE COMMENT 'Unit price at which the security was traded.', fee DOUBLE COMMENT 'Fee charged for placing this trade request', commission DOUBLE COMMENT 'Commission earned on this trade', tax DOUBLE COMMENT 'Amount of tax due on this trade', batchid INT COMMENT 'Batch ID when this record was inserted'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT dimtrade_pk PRIMARY KEY(tradeid), CONSTRAINT dimtrade_security_fk FOREIGN KEY (sk_securityid) REFERENCES DimSecurity(sk_securityid), CONSTRAINT dimtrade_company_fk FOREIGN KEY (sk_companyid) REFERENCES DimCompany(sk_companyid), CONSTRAINT dimtrade_broker_fk FOREIGN KEY (sk_brokerid) REFERENCES DimBroker(sk_brokerid), CONSTRAINT dimtrade_account_fk FOREIGN KEY (sk_accountid) REFERENCES DimAccount(sk_accountid), CONSTRAINT dimtrade_customer_fk FOREIGN KEY (sk_customerid) REFERENCES DimCustomer(sk_customerid), CONSTRAINT dimtrade_createdate_fk FOREIGN KEY (sk_createdateid) REFERENCES DimDate(sk_dateid), CONSTRAINT dimtrade_closedate_fk FOREIGN KEY (sk_closedateid) REFERENCES DimDate(sk_dateid), CONSTRAINT dimtrade_createtime_fk FOREIGN KEY (sk_createtimeid) REFERENCES DimTime(sk_timeid), CONSTRAINT dimtrade_closetime_fk FOREIGN KEY (sk_closetimeid) REFERENCES DimTime(sk_timeid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Silver_FactHoldings",
      "depends_on": [
        {
          "task_key": "Silver_DimTrade"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/FactHoldings",
        "base_parameters": {
          "tgt_schema": "tradeid INT COMMENT 'Key for Orignial Trade Indentifier', currenttradeid INT {{ null_constraint }} COMMENT 'Key for the current trade', sk_customerid BIGINT COMMENT 'Surrogate key for Customer Identifier', sk_accountid BIGINT COMMENT 'Surrogate key for Account Identifier', sk_securityid BIGINT COMMENT 'Surrogate key for Security Identifier', sk_companyid BIGINT COMMENT 'Surrogate key for Company Identifier', sk_dateid BIGINT COMMENT 'Surrogate key for the date associated with the', sk_timeid BIGINT COMMENT 'Surrogate key for the time associated with the', currentprice DOUBLE COMMENT 'Unit price of this security for the current trade', currentholding INT COMMENT 'Quantity of a security held after the current trade.', batchid INT COMMENT 'Batch ID when this record was inserted'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT factholdings_pk PRIMARY KEY(currenttradeid), CONSTRAINT factholdings_security_fk FOREIGN KEY (sk_securityid) REFERENCES DimSecurity(sk_securityid), CONSTRAINT factholdings_company_fk FOREIGN KEY (sk_companyid) REFERENCES DimCompany(sk_companyid), CONSTRAINT factholdings_trade_fk FOREIGN KEY (tradeid) REFERENCES DimTrade(tradeid), CONSTRAINT factholdings_currenttrade_fk FOREIGN KEY (currenttradeid) REFERENCES DimTrade(tradeid), CONSTRAINT factholdings_account_fk FOREIGN KEY (sk_accountid) REFERENCES DimAccount(sk_accountid), CONSTRAINT factholdings_customer_fk FOREIGN KEY (sk_customerid) REFERENCES DimCustomer(sk_customerid), CONSTRAINT factholdings_date_fk FOREIGN KEY (sk_dateid) REFERENCES DimDate(sk_dateid), CONSTRAINT factholdings_time_fk FOREIGN KEY (sk_timeid) REFERENCES DimTime(sk_timeid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Silver_Financial",
      "depends_on": [
        {
          "task_key": "Silver_DimCompany"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/Financial",
        "base_parameters": {
          "tgt_schema": "sk_companyid BIGINT {{ null_constraint }} COMMENT 'Company SK.', fi_year INT {{ null_constraint }} COMMENT 'Year of the quarter end.', fi_qtr INT {{ null_constraint }} COMMENT 'Quarter number that the financial information is for: valid values 1, 2, 3, 4.', fi_qtr_start_date DATE COMMENT 'Start date of quarter.', fi_revenue DOUBLE COMMENT 'Reported revenue for the quarter.', fi_net_earn DOUBLE COMMENT 'Net earnings reported for the quarter.', fi_basic_eps DOUBLE COMMENT 'Basic earnings per share for the quarter.', fi_dilut_eps DOUBLE COMMENT 'Diluted earnings per share for the quarter.', fi_margin DOUBLE COMMENT 'Profit divided by revenues for the quarter.', fi_inventory DOUBLE COMMENT 'Value of inventory on hand at the end of quarter.', fi_assets DOUBLE COMMENT 'Value of total assets at the end of the quarter.', fi_liability DOUBLE COMMENT 'Value of total liabilities at the end of the quarter.', fi_out_basic BIGINT COMMENT 'Average number of shares outstanding (basic).', fi_out_dilut BIGINT COMMENT 'Average number of shares outstanding (diluted).'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT financial_pk PRIMARY KEY(sk_companyid, fi_year, fi_qtr), CONSTRAINT financial_company_fk FOREIGN KEY (sk_companyid) REFERENCES DimCompany(sk_companyid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    },
    {
      "task_key": "Gold_FactMarketHistory",
      "depends_on": [
        {
          "task_key": "Silver_DimSecurity"
        },
        {
          "task_key": "Silver_Financial"
        }
      ],
      "run_if": "ALL_SUCCESS",
      "notebook_task": {
        "notebook_path": "{{ repo_src_path }}/single_batch/SQL/FactMarketHistory",
        "base_parameters": {
          "tgt_schema": "sk_securityid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for SecurityID', sk_companyid BIGINT COMMENT 'Surrogate key for CompanyID', sk_dateid BIGINT {{ null_constraint }} COMMENT 'Surrogate key for the date', peratio DOUBLE COMMENT 'Price to earnings per share ratio', yield DOUBLE COMMENT 'Dividend to price ratio, as a percentage', fiftytwoweekhigh DOUBLE COMMENT 'Security highest price in last 52 weeks from this day', sk_fiftytwoweekhighdate BIGINT COMMENT 'Earliest date on which the 52 week high price was set', fiftytwoweeklow DOUBLE COMMENT 'Security lowest price in last 52 weeks from this day', sk_fiftytwoweeklowdate BIGINT COMMENT 'Earliest date on which the 52 week low price was set', closeprice DOUBLE COMMENT 'Security closing price on this day', dayhigh DOUBLE COMMENT 'Highest price for the security on this day', daylow DOUBLE COMMENT 'Lowest price for the security on this day', volume INT COMMENT 'Trading volume of the security on this day', batchid INT COMMENT 'Batch ID when this record was inserted'",
          "constraints": "{% if not perf_opt_flg %}, CONSTRAINT fmh_pk PRIMARY KEY(sk_securityid, sk_dateid), CONSTRAINT fmh_security_fk FOREIGN KEY (sk_securityid) REFERENCES DimSecurity(sk_securityid), CONSTRAINT fmh_company_fk FOREIGN KEY (sk_companyid) REFERENCES DimCompany(sk_companyid), CONSTRAINT fmh_date_fk FOREIGN KEY (sk_dateid) REFERENCES DimDate(sk_dateid){% endif %}",
          "tbl_props": "'delta.autoOptimize.autoCompact'=False, {{ opt_write }} {{ index_cols }}"
        },
        {% if exec_type == "DBSQL" %}
        "warehouse_id": "{{ wh_id }}",
        {% endif %}
        "source": "WORKSPACE"
      },
      {% if serverless != "YES" %}
      "job_cluster_key": "{{ job_name }}_compute",
      {% endif %}
      "timeout_seconds": 0,
      "email_notifications": {},
      "notification_settings": {
        "no_alert_for_skipped_runs": false,
        "no_alert_for_canceled_runs": false,
        "alert_on_last_attempt": false
      }
    }
  ]
}